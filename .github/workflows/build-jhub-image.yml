name: Build and Publish JupyterHub Image

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile.jhub'
      - '.github/workflows/build-jhub-image.yml'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Optional tag override (default: nightly)'
        required: false
        type: string

env:
  IMAGE_NAME: bionemo-jhub
  REGISTRY: ghcr.io
  ORG: ${{ github.repository_owner }}

jobs:
  build-and-push:
    name: Build & Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            Dockerfile.jhub
          sparse-checkout-cone-mode: false

      - name: Free disk space
        run: |
          set -euo pipefail
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /opt/hostedtoolcache/CodeQL || true
          sudo rm -rf /opt/hostedtoolcache/Java || true
          sudo rm -rf /opt/hostedtoolcache/Python/3.1* || true
          sudo rm -rf /opt/hostedtoolcache/node || true
          docker system prune -af || true
          docker builder prune -af || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Resolve tags
        id: meta
        env:
          # Only defined for workflow_dispatch; empty otherwise
          INPUT_TAG: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}
        run: |
          set -euo pipefail
          # GHCR requires fully lowercase repository/image names.
          ORG_LC=$(echo "${{ env.ORG }}" | tr '[:upper:]' '[:lower:]')
          if [ -z "${INPUT_TAG}" ]; then
            DATE_TAG=$(date -u +'%Y%m%d')
            SHORT_SHA=${GITHUB_SHA::7}
            VERSION_TAG="nightly-${DATE_TAG}-${SHORT_SHA}"
          else
            VERSION_TAG="${INPUT_TAG}"
          fi
          LATEST_TAG="nightly"
          IMAGE_BASE="${{ env.REGISTRY }}/${ORG_LC}/${{ env.IMAGE_NAME }}"
          {
            echo "version_tag=$VERSION_TAG"
            echo "latest_tag=$LATEST_TAG"
            echo "image_base=$IMAGE_BASE"
          } >> "$GITHUB_OUTPUT"
          echo "Resolved tags: $IMAGE_BASE:$VERSION_TAG and $IMAGE_BASE:$LATEST_TAG"

      - name: Extract Git metadata (labels)
        id: gitmeta
        run: |
          echo "sha_short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "ref_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

      - name: Build and push (amd64 only)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.jhub
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.meta.outputs.image_base }}:${{ steps.meta.outputs.version_tag }}
            ${{ steps.meta.outputs.image_base }}:${{ steps.meta.outputs.latest_tag }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version_tag }}
            org.opencontainers.image.ref.name=${{ steps.gitmeta.outputs.ref_name }}

      - name: Summary
        run: |
          echo "Image pushed:" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.image_base }}:${{ steps.meta.outputs.version_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "Tagged also as: ${{ steps.meta.outputs.image_base }}:${{ steps.meta.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY
